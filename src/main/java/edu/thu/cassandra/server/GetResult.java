/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.thu.cassandra.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-14")
public class GetResult {

  public interface Iface {

    public java.nio.ByteBuffer getResult(String keyspace, String cf, String key, String colName, int startPos, int endPos) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getResult(String keyspace, String cf, String key, String colName, int startPos, int endPos, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.nio.ByteBuffer getResult(String keyspace, String cf, String key, String colName, int startPos, int endPos) throws org.apache.thrift.TException
    {
      send_getResult(keyspace, cf, key, colName, startPos, endPos);
      return recv_getResult();
    }

    public void send_getResult(String keyspace, String cf, String key, String colName, int startPos, int endPos) throws org.apache.thrift.TException
    {
      getResult_args args = new getResult_args();
      args.setKeyspace(keyspace);
      args.setCf(cf);
      args.setKey(key);
      args.setColName(colName);
      args.setStartPos(startPos);
      args.setEndPos(endPos);
      sendBase("getResult", args);
    }

    public java.nio.ByteBuffer recv_getResult() throws org.apache.thrift.TException
    {
      getResult_result result = new getResult_result();
      receiveBase(result, "getResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResult failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getResult(String keyspace, String cf, String key, String colName, int startPos, int endPos, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getResult_call method_call = new getResult_call(keyspace, cf, key, colName, startPos, endPos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getResult_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private String keyspace;
      private String cf;
      private String key;
      private String colName;
      private int startPos;
      private int endPos;
      public getResult_call(String keyspace, String cf, String key, String colName, int startPos, int endPos, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyspace = keyspace;
        this.cf = cf;
        this.key = key;
        this.colName = colName;
        this.startPos = startPos;
        this.endPos = endPos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getResult_args args = new getResult_args();
        args.setKeyspace(keyspace);
        args.setCf(cf);
        args.setKey(key);
        args.setColName(colName);
        args.setStartPos(startPos);
        args.setEndPos(endPos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getResult();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getResult", new getResult());
      return processMap;
    }

    public static class getResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResult_args> {
      public getResult() {
        super("getResult");
      }

      public getResult_args getEmptyArgsInstance() {
        return new getResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getResult_result getResult(I iface, getResult_args args) throws org.apache.thrift.TException {
        getResult_result result = new getResult_result();
        result.success = iface.getResult(args.keyspace, args.cf, args.key, args.colName, args.startPos, args.endPos);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getResult", new getResult());
      return processMap;
    }

    public static class getResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getResult_args, java.nio.ByteBuffer> {
      public getResult() {
        super("getResult");
      }

      public getResult_args getEmptyArgsInstance() {
        return new getResult_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          public void onComplete(java.nio.ByteBuffer o) {
            getResult_result result = new getResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getResult_result result = new getResult_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getResult_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.getResult(args.keyspace, args.cf, args.key, args.colName, args.startPos, args.endPos,resultHandler);
      }
    }

  }

  public static class getResult_args implements org.apache.thrift.TBase<getResult_args, getResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResult_args");

    private static final org.apache.thrift.protocol.TField KEYSPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("keyspace", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CF_FIELD_DESC = new org.apache.thrift.protocol.TField("cf", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("colName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField START_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("startPos", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField END_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("endPos", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResult_argsTupleSchemeFactory();

    public String keyspace; // required
    public String cf; // required
    public String key; // required
    public String colName; // required
    public int startPos; // required
    public int endPos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYSPACE((short)1, "keyspace"),
      CF((short)2, "cf"),
      KEY((short)3, "key"),
      COL_NAME((short)4, "colName"),
      START_POS((short)5, "startPos"),
      END_POS((short)6, "endPos");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYSPACE
            return KEYSPACE;
          case 2: // CF
            return CF;
          case 3: // KEY
            return KEY;
          case 4: // COL_NAME
            return COL_NAME;
          case 5: // START_POS
            return START_POS;
          case 6: // END_POS
            return END_POS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTPOS_ISSET_ID = 0;
    private static final int __ENDPOS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYSPACE, new org.apache.thrift.meta_data.FieldMetaData("keyspace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CF, new org.apache.thrift.meta_data.FieldMetaData("cf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COL_NAME, new org.apache.thrift.meta_data.FieldMetaData("colName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_POS, new org.apache.thrift.meta_data.FieldMetaData("startPos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.END_POS, new org.apache.thrift.meta_data.FieldMetaData("endPos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResult_args.class, metaDataMap);
    }

    public getResult_args() {
    }

    public getResult_args(
      String keyspace,
      String cf,
      String key,
      String colName,
      int startPos,
      int endPos)
    {
      this();
      this.keyspace = keyspace;
      this.cf = cf;
      this.key = key;
      this.colName = colName;
      this.startPos = startPos;
      setStartPosIsSet(true);
      this.endPos = endPos;
      setEndPosIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResult_args(getResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKeyspace()) {
        this.keyspace = other.keyspace;
      }
      if (other.isSetCf()) {
        this.cf = other.cf;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetColName()) {
        this.colName = other.colName;
      }
      this.startPos = other.startPos;
      this.endPos = other.endPos;
    }

    public getResult_args deepCopy() {
      return new getResult_args(this);
    }

    @Override
    public void clear() {
      this.keyspace = null;
      this.cf = null;
      this.key = null;
      this.colName = null;
      setStartPosIsSet(false);
      this.startPos = 0;
      setEndPosIsSet(false);
      this.endPos = 0;
    }

    public String getKeyspace() {
      return this.keyspace;
    }

    public getResult_args setKeyspace(String keyspace) {
      this.keyspace = keyspace;
      return this;
    }

    public void unsetKeyspace() {
      this.keyspace = null;
    }

    /** Returns true if field keyspace is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyspace() {
      return this.keyspace != null;
    }

    public void setKeyspaceIsSet(boolean value) {
      if (!value) {
        this.keyspace = null;
      }
    }

    public String getCf() {
      return this.cf;
    }

    public getResult_args setCf(String cf) {
      this.cf = cf;
      return this;
    }

    public void unsetCf() {
      this.cf = null;
    }

    /** Returns true if field cf is set (has been assigned a value) and false otherwise */
    public boolean isSetCf() {
      return this.cf != null;
    }

    public void setCfIsSet(boolean value) {
      if (!value) {
        this.cf = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public getResult_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getColName() {
      return this.colName;
    }

    public getResult_args setColName(String colName) {
      this.colName = colName;
      return this;
    }

    public void unsetColName() {
      this.colName = null;
    }

    /** Returns true if field colName is set (has been assigned a value) and false otherwise */
    public boolean isSetColName() {
      return this.colName != null;
    }

    public void setColNameIsSet(boolean value) {
      if (!value) {
        this.colName = null;
      }
    }

    public int getStartPos() {
      return this.startPos;
    }

    public getResult_args setStartPos(int startPos) {
      this.startPos = startPos;
      setStartPosIsSet(true);
      return this;
    }

    public void unsetStartPos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTPOS_ISSET_ID);
    }

    /** Returns true if field startPos is set (has been assigned a value) and false otherwise */
    public boolean isSetStartPos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTPOS_ISSET_ID);
    }

    public void setStartPosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTPOS_ISSET_ID, value);
    }

    public int getEndPos() {
      return this.endPos;
    }

    public getResult_args setEndPos(int endPos) {
      this.endPos = endPos;
      setEndPosIsSet(true);
      return this;
    }

    public void unsetEndPos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDPOS_ISSET_ID);
    }

    /** Returns true if field endPos is set (has been assigned a value) and false otherwise */
    public boolean isSetEndPos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDPOS_ISSET_ID);
    }

    public void setEndPosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDPOS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEYSPACE:
        if (value == null) {
          unsetKeyspace();
        } else {
          setKeyspace((String)value);
        }
        break;

      case CF:
        if (value == null) {
          unsetCf();
        } else {
          setCf((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case COL_NAME:
        if (value == null) {
          unsetColName();
        } else {
          setColName((String)value);
        }
        break;

      case START_POS:
        if (value == null) {
          unsetStartPos();
        } else {
          setStartPos((Integer)value);
        }
        break;

      case END_POS:
        if (value == null) {
          unsetEndPos();
        } else {
          setEndPos((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYSPACE:
        return getKeyspace();

      case CF:
        return getCf();

      case KEY:
        return getKey();

      case COL_NAME:
        return getColName();

      case START_POS:
        return getStartPos();

      case END_POS:
        return getEndPos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEYSPACE:
        return isSetKeyspace();
      case CF:
        return isSetCf();
      case KEY:
        return isSetKey();
      case COL_NAME:
        return isSetColName();
      case START_POS:
        return isSetStartPos();
      case END_POS:
        return isSetEndPos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResult_args)
        return this.equals((getResult_args)that);
      return false;
    }

    public boolean equals(getResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_keyspace = true && this.isSetKeyspace();
      boolean that_present_keyspace = true && that.isSetKeyspace();
      if (this_present_keyspace || that_present_keyspace) {
        if (!(this_present_keyspace && that_present_keyspace))
          return false;
        if (!this.keyspace.equals(that.keyspace))
          return false;
      }

      boolean this_present_cf = true && this.isSetCf();
      boolean that_present_cf = true && that.isSetCf();
      if (this_present_cf || that_present_cf) {
        if (!(this_present_cf && that_present_cf))
          return false;
        if (!this.cf.equals(that.cf))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_colName = true && this.isSetColName();
      boolean that_present_colName = true && that.isSetColName();
      if (this_present_colName || that_present_colName) {
        if (!(this_present_colName && that_present_colName))
          return false;
        if (!this.colName.equals(that.colName))
          return false;
      }

      boolean this_present_startPos = true;
      boolean that_present_startPos = true;
      if (this_present_startPos || that_present_startPos) {
        if (!(this_present_startPos && that_present_startPos))
          return false;
        if (this.startPos != that.startPos)
          return false;
      }

      boolean this_present_endPos = true;
      boolean that_present_endPos = true;
      if (this_present_endPos || that_present_endPos) {
        if (!(this_present_endPos && that_present_endPos))
          return false;
        if (this.endPos != that.endPos)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetKeyspace()) ? 131071 : 524287);
      if (isSetKeyspace())
        hashCode = hashCode * 8191 + keyspace.hashCode();

      hashCode = hashCode * 8191 + ((isSetCf()) ? 131071 : 524287);
      if (isSetCf())
        hashCode = hashCode * 8191 + cf.hashCode();

      hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
      if (isSetKey())
        hashCode = hashCode * 8191 + key.hashCode();

      hashCode = hashCode * 8191 + ((isSetColName()) ? 131071 : 524287);
      if (isSetColName())
        hashCode = hashCode * 8191 + colName.hashCode();

      hashCode = hashCode * 8191 + startPos;

      hashCode = hashCode * 8191 + endPos;

      return hashCode;
    }

    @Override
    public int compareTo(getResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(other.isSetKeyspace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyspace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyspace, other.keyspace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCf()).compareTo(other.isSetCf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cf, other.cf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColName()).compareTo(other.isSetColName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colName, other.colName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartPos()).compareTo(other.isSetStartPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startPos, other.startPos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndPos()).compareTo(other.isSetEndPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endPos, other.endPos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResult_args(");
      boolean first = true;

      sb.append("keyspace:");
      if (this.keyspace == null) {
        sb.append("null");
      } else {
        sb.append(this.keyspace);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cf:");
      if (this.cf == null) {
        sb.append("null");
      } else {
        sb.append(this.cf);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("colName:");
      if (this.colName == null) {
        sb.append("null");
      } else {
        sb.append(this.colName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startPos:");
      sb.append(this.startPos);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endPos:");
      sb.append(this.endPos);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResult_argsStandardScheme getScheme() {
        return new getResult_argsStandardScheme();
      }
    }

    private static class getResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYSPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyspace = iprot.readString();
                struct.setKeyspaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cf = iprot.readString();
                struct.setCfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.colName = iprot.readString();
                struct.setColNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startPos = iprot.readI32();
                struct.setStartPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endPos = iprot.readI32();
                struct.setEndPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyspace != null) {
          oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
          oprot.writeString(struct.keyspace);
          oprot.writeFieldEnd();
        }
        if (struct.cf != null) {
          oprot.writeFieldBegin(CF_FIELD_DESC);
          oprot.writeString(struct.cf);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.colName != null) {
          oprot.writeFieldBegin(COL_NAME_FIELD_DESC);
          oprot.writeString(struct.colName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_POS_FIELD_DESC);
        oprot.writeI32(struct.startPos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_POS_FIELD_DESC);
        oprot.writeI32(struct.endPos);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResult_argsTupleScheme getScheme() {
        return new getResult_argsTupleScheme();
      }
    }

    private static class getResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetKeyspace()) {
          optionals.set(0);
        }
        if (struct.isSetCf()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetColName()) {
          optionals.set(3);
        }
        if (struct.isSetStartPos()) {
          optionals.set(4);
        }
        if (struct.isSetEndPos()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetKeyspace()) {
          oprot.writeString(struct.keyspace);
        }
        if (struct.isSetCf()) {
          oprot.writeString(struct.cf);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetColName()) {
          oprot.writeString(struct.colName);
        }
        if (struct.isSetStartPos()) {
          oprot.writeI32(struct.startPos);
        }
        if (struct.isSetEndPos()) {
          oprot.writeI32(struct.endPos);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.keyspace = iprot.readString();
          struct.setKeyspaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cf = iprot.readString();
          struct.setCfIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.colName = iprot.readString();
          struct.setColNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startPos = iprot.readI32();
          struct.setStartPosIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endPos = iprot.readI32();
          struct.setEndPosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getResult_result implements org.apache.thrift.TBase<getResult_result, getResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getResult_resultTupleSchemeFactory();

    public java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResult_result.class, metaDataMap);
    }

    public getResult_result() {
    }

    public getResult_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResult_result(getResult_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public getResult_result deepCopy() {
      return new getResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public getResult_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public getResult_result setSuccess(java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResult_result)
        return this.equals((getResult_result)that);
      return false;
    }

    public boolean equals(getResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResult_resultStandardScheme getScheme() {
        return new getResult_resultStandardScheme();
      }
    }

    private static class getResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getResult_resultTupleScheme getScheme() {
        return new getResult_resultTupleScheme();
      }
    }

    private static class getResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
