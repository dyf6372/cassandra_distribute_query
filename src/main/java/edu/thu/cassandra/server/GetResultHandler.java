/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.thu.cassandra.server;

import com.datastax.driver.core.*;
import com.datastax.driver.core.policies.LoadBalancingPolicy;
import com.datastax.driver.core.policies.RoundRobinPolicy;
import edu.thu.cassandra.util.IpDemo;
import org.apache.thrift.TException;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.CopyOnWriteArrayList;

class MyPolicyPolicy implements LoadBalancingPolicy{


    private final CopyOnWriteArrayList<Host> liveHosts = new CopyOnWriteArrayList<Host>();

    @Override
    public void init(Cluster cluster, Collection<Host> hosts) {
        for(Host host: hosts){
            System.out.println(host.getAddress());
            if(host.getAddress().getHostAddress().equals(IpDemo.getMyIp()))
               liveHosts.add(host);
        }
    }

    @Override
    public HostDistance distance(Host host) {
        return HostDistance.LOCAL;
    }

    @Override
    public Iterator<Host> newQueryPlan(String loggedKeyspace, Statement statement) {
        return liveHosts.iterator();
    }

    @Override
    public void onAdd(Host host) {}

    @Override
    public void onUp(Host host) {}

    @Override
    public void onDown(Host host) {}

    @Override
    public void onRemove(Host host) {}

    @Override
    public void close() {}
}
public class GetResultHandler implements GetResult.Iface{
    private Cluster cluster = null;
    private Session session = null;
    public GetResultHandler(){
        cluster = Cluster.builder()
                .addContactPoint(IpDemo.getMyIp())
                .withLoadBalancingPolicy(new MyPolicyPolicy())
                .build();
        session =  cluster.connect();
    }
    public ByteBuffer getResult(String keyspace, String cf, String key, String colName, int startPos, int endPos)
            throws org.apache.thrift.TException{
        PreparedStatement prepared = session.prepare("select value from " + keyspace + "." + cf +" where id = " + key + " and time = " + colName + ";");

        BoundStatement bound = prepared.bind();
        bound.setConsistencyLevel(ConsistencyLevel.ONE);

        ResultSet rf = session.execute(bound);
        ByteBuffer value = rf.one().get("value", ByteBuffer.class);
        if(endPos == -1)
            endPos = value.array().length;
        value.position(startPos);
        ByteBuffer result = value.get(new byte[endPos - startPos]);
        result.position(0);
        System.out.println("get result:" + key + " " + cf + " " + key + " " + colName + " " + " value:" + result);
        return result;
    }

    public static void main(String[] args) throws TException {

        //System.out.println(IpDemo.getMyIp());
        System.out.println(new GetResultHandler().getResult("dyf6", "test100", "1", "1", 8, 16).order(ByteOrder.LITTLE_ENDIAN).getLong());
    }

}